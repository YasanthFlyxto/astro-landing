---
// VideoGallery.astro

// Define categories and their corresponding playlist IDs
const categories = [
  { name: "All", playlistId: "" },
  {
    name: "Corporate  Productions",
    playlistId: "PL1BjZnl1Zi3Vx9XUN9i1pjwVpiy1Ys2ga",
  },
  { name: "Music Videos", playlistId: "PL1BjZnl1Zi3UG2l9M8dNP9zAT-fgeoI0X" },
  {
    name: "Creative Content",
    playlistId: "PL1BjZnl1Zi3VEgC-K7J45QqcBiyZG5lzd",
  },
  {
    name: "Strategic Content",
    playlistId: "",
  },
];

// YouTube API key (replace with your own)
const API_KEY = import.meta.env.YOUR_YOUTUBE_API_KEY;

// Fetch video data for a playlist
async function fetchPlaylistVideos(playlistId) {
  try {
    const response = await fetch(
      `https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&maxResults=10&playlistId=${playlistId}&key=${API_KEY}`
    );
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    const data = await response.json();
    return data.items.map((item) => ({
      id: item.snippet.resourceId.videoId,
      title: item.snippet.title,
      description: item.snippet.description,
      thumbnail: item.snippet.thumbnails.medium.url,
    }));
  } catch (error) {
    console.error(`Error fetching playlist ${playlistId}:`, error);
    return [];
  }
}

// Fetch videos for all playlists
let videos = [];
try {
  const allVideos = await Promise.all(
    categories.slice(1).map(async (category) => {
      const categoryVideos = await fetchPlaylistVideos(category.playlistId);
      return categoryVideos.map((video) => ({
        ...video,
        category: category.name,
      }));
    })
  );
  videos = allVideos.flat();
} catch (error) {
  console.error("Error fetching videos:", error);
}

// Fallback videos in case of API failure
const fallbackVideos = [
  {
    id: "dQw4w9WgXcQ",
    title: "Fallback Video 1",
    category: "Music",
    thumbnail: "https://img.youtube.com/vi/dQw4w9WgXcQ/0.jpg",
    description: "This is a fallback video description.",
  },
  {
    id: "uD4izuDMUQA",
    title: "Fallback Video 2",
    category: "Science",
    thumbnail: "https://img.youtube.com/vi/uD4izuDMUQA/0.jpg",
    description: "This is another fallback video description.",
  },
  {
    id: "1Q8fG0TtVAY",
    title: "Fallback Video 3",
    category: "Technology",
    thumbnail: "https://img.youtube.com/vi/1Q8fG0TtVAY/0.jpg",
    description: "Yet another fallback video description.",
  },
  {
    id: "jNQXAC9IVRw",
    title: "Fallback Video 4",
    category: "Entertainment",
    thumbnail: "https://img.youtube.com/vi/jNQXAC9IVRw/0.jpg",
    description: "The last fallback video description.",
  },
];

// Use fallback videos if no videos were fetched
if (videos.length === 0) {
  videos = fallbackVideos;
}
---

<div class="mb-4">
  <a href="/portfolio" class="ring-1 py-2 px-4 rounded-full text-center"
    >&larr; Back To Menu</a
  >
</div>
<div class="container mx-auto p-4">
  <div class="flex flex-wrap gap-2 justify-center mb-4" id="category-filters">
    {
      categories.map((category) => (
        <button
          class="px-4 py-2 rounded-full focus:bg-gray-400 transition hover:bg-gray-300 bg-gray-200"
          data-category={category.name}
        >
          {category.name}
        </button>
      ))
    }
  </div>

  <div
    class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4"
    id="video-grid"
  >
    <!-- Video thumbnails will be dynamically inserted here -->
  </div>

  <div
    id="video-modal"
    class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center overflow-y-auto"
  >
    <div class="bg-white p-4 rounded-lg w-full max-w-4xl mx-4 my-8">
      <div class="flex justify-between items-center mb-4">
        <h2 id="modal-title" class="text-xl font-bold"></h2>
        <button id="close-modal" class="text-2xl">&times;</button>
      </div>
      <div class="aspect-video w-full mb-4">
        <div id="youtube-player" class="w-full h-full"></div>
      </div>
      <div id="video-description" class="text-sm max-h-40 overflow-y-auto">
      </div>
    </div>
  </div>
</div>

<script define:vars={{ videos, categories }}>
  function initVideoGallery() {
    const videoGrid = document.getElementById("video-grid");
    const categoryFilters = document.getElementById("category-filters");
    const videoModal = document.getElementById("video-modal");
    const modalTitle = document.getElementById("modal-title");
    const youtubePlayer = document.getElementById("youtube-player");
    const videoDescription = document.getElementById("video-description");
    const closeModal = document.getElementById("close-modal");
    let player;

    function renderVideos(filteredVideos) {
      videoGrid.innerHTML = "";
      filteredVideos.forEach((video) => {
        const videoElement = document.createElement("div");
        videoElement.class = "cursor-pointer";
        videoElement.innerHTML = `
          <img src="${video.thumbnail}" alt="${video.title}" class="w-full rounded-lg hover:opacity-75 transition transition-opacity">
          <p class="mt-2 text-sm font-medium">${video.title}</p>
        `;
        videoElement.addEventListener("click", () => openVideoModal(video));
        videoGrid.appendChild(videoElement);
      });
    }

    function openVideoModal(video) {
      modalTitle.textContent = video.title;
      videoDescription.textContent = video.description;
      videoModal.classList.remove("hidden");
      videoModal.classList.add("flex");

      if (player) {
        player.destroy();
      }

      player = new YT.Player("youtube-player", {
        height: "100%",
        width: "100%",
        videoId: video.id,
        playerVars: {
          autoplay: 1,
        },
      });
    }

    function closeVideoModal() {
      videoModal.classList.add("hidden");
      videoModal.classList.remove("flex");
      if (player) {
        player.stopVideo();
      }
    }

    function updateURLWithCategory(category) {
      const url = new URL(window.location);
      if (category === "All") {
        url.searchParams.delete("category");
      } else {
        url.searchParams.set("category", category);
      }
      history.pushState({}, "", url);
    }

    function getCategoryFromURL() {
      const urlParams = new URLSearchParams(window.location.search);
      return urlParams.get("category") || "All";
    }

    function setActiveCategory(category) {
      categoryFilters.querySelectorAll("button").forEach((btn) => {
        btn.classList.remove("bg-gray-500", "text-white");
        btn.classList.add("bg-gray-200");
        if (btn.dataset.category === category) {
          btn.classList.remove("bg-gray-200");
          btn.classList.add("bg-gray-500", "text-white");
        }
      });

      const filteredVideos =
        category === "All"
          ? videos
          : videos.filter((video) => video.category === category);
      renderVideos(filteredVideos);
      updateURLWithCategory(category);
    }

    categoryFilters.addEventListener("click", (event) => {
      if (event.target.tagName === "BUTTON") {
        const category = event.target.dataset.category;
        setActiveCategory(category);
      }
    });

    closeModal.addEventListener("click", closeVideoModal);

    videoModal.addEventListener("click", (event) => {
      if (event.target === videoModal) {
        closeVideoModal();
      }
    });

    // Handle browser back/forward navigation
    window.addEventListener("popstate", () => {
      const category = getCategoryFromURL();
      setActiveCategory(category);
    });

    // Initial render based on URL
    const initialCategory = getCategoryFromURL();
    setActiveCategory(initialCategory);
  }

  // Load YouTube IFrame API
  const tag = document.createElement("script");
  tag.src = "https://www.youtube.com/iframe_api";
  const firstScriptTag = document.getElementsByTagName("script")[0];
  firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

  window.onYouTubeIframeAPIReady = function () {
    // Run the initialization function when the YouTube IFrame API is ready
    initVideoGallery();
  };

  // Re-run the initialization when Astro swaps the page content
  document.addEventListener("astro:page-load", initVideoGallery);
</script>

<style>
  /* Add any additional styles here if needed */
</style>
